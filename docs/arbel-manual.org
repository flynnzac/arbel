# -*- org-html-preamble-format: (("en" "%t<br>%a<br>%T")); -*-
#+TITLE: ARBEL
#+AUTHOR: Zach Flynn
#+DESCRIPTION: ARBEL is a registry-based environment and language. 

* Introduction
** ARBEL is a language for manipulating registries and scope

   ARBEL is a Registry-Based Environment and Language. A /registry/ is what other languages might call a /map/ or a (hash) /table/.  It is a data structure where data is located at "registers".  The data in the registers can be other registries or numbers or strings or code or even other registers.  Registries are the fundamental data type of ARBEL and the language provides many operations to manipulate and recover values from the registries.  

   But registries are not only a data structure in ARBEL.  Registries are also used to define the /scope/ of code.  

   ARBEL /instructions/ are like procedures in other languages, but they operate within a registry specified by the caller of the instruction. They have no environment or context themselves.  The programmer calling the instruction decides which "arguments" the instruction has, not the author of the instruction. Effectively, this makes instructions naturally /generic/ because any non-literal value in the instruction can be replaced with arbitrary data by the caller of the instruction.

   ARBEL is biased in favor of giving the /caller/ of code more control over the environment in which code is executed. It is biased against rigid encapsulation.  Because the scope of code in ARBEL is itself data, the caller can change everything about the environment ARBEL instructions are executed in.

For example,
#+BEGIN_SRC arbel
... set /add-one ( add t 1 . ) .
... add-one /t 5 .
ans = 6
... add-one /t 5 /add sub .
ans = 4
#+END_SRC

In this example, the instruction =add-one= is created.  Even without knowing any ARBEL yet, you can probably guess that the instruction is meant by the writer of the instruction to add one to an argument named =t=.  But the /caller/ of the code can modify the registry the code is executed in, replacing =add= (the operation to add numbers in ARBEL) with =sub= (the operation to subtract numbers in ARBEL) to make it subtract one from its argument.

Giving the caller flexibility to use an instruction in ways the author did not anticipate offers freedom to the user.  You do not need to copy-paste a piece of code that is just slightly different from what you want.  Of course, doing exactly as in the above example is probably not the best idea, but something like the following is a useful way to reuse code:
#+BEGIN_SRC arbel
... set /add-one ( add t 1 . ) .
... set /sub-one ( add-one /t t /add sub . ) .
#+END_SRC

ARBEL is designed to be useful for writing "personal" programs: programs primarily for a person or company's own use.  When using these kinds of programs it is often useful to have lots of flexibility as the caller because there is little downside to weaker encapsulation.  

These programs will often be designed and used interactively which brings us to the second characteristic of ARBEL.

** ARBEL is an environment for interactively creating code and managing data

ARBEL provides an interactive environment for executing code.  It aims to be used interactively for executing code, not just for prototyping.  Beyond having a standard interactive interface (a REPL), it allows the user to save the full state of ARBEL to disk and restore it at a later time.  It also keeps track of the code you enter in the interactive session so you can output a script that you have built up interactively.  ARBEL's syntax itself also helps it be useful at the prompt, not just when writing scripts in files. The syntax is similar to entering commands at the command line.  For example, a line of ARBEL code might look like this:

#+BEGIN_SRC arbel
... prepare /document "report" /from "2020-01-01" /to "2020-03-31" .
#+END_SRC

Even without any knowledge of ARBEL, you can probably guess that this calls an instruction called "prepare" and sets arguments to that instruction. The syntax is easy to type interactively because it follows exactly this format for all code.  

The focus on interactivity is an advantage of using ARBEL because it is simple to deploy code written by programmers for use by non-programmers who need to do business or personal tasks with the code.  For example, the user could have typed the above and examined the output.  Upon further review, the user discovered that one of the days in the date range was an outlier because of some unexpected event.  They could then re-run the code again, changing the dates slightly.

** ARBEL has Just Enough (tm) Syntax

ARBEL's syntax is highly regular.  It is usually just an operation followed by arguments, ending with a period.  On top of this, it adds Just A Little Bit More syntax which can help with making things easier to type and review.  

It uses different types of parenthesis to control when various substatements are executed.  In effect, this allows the user to control whether arguments to an instructions are evaluated greedily (evaluated before the instruction is called) or lazily (evaluated only if the instruction tries to use the argument) and to quote code to be evaluated later, potentially in another context.

** Classifying ARBEL

This section provides some broad features of ARBEL's type sytem and other characteristics.  In a sentence: ARBEL is a strongly, but dynamically-typed imperative language. The rest of this section can be skipped on first reading.  It may not be clear without knowing a bit more about the language.  

*** Type System

ARBEL is dynamically typed in the sense that registers do not have types, only values located at registers have types.   

ARBEL is strongly typed: to convert one type to another you must use explicit operations for that purpose.  It does not convert various values to Strings, for example.  The only exception is some basic arithmetic operations do not complain when you, say, add Integers and Real numbers, even though those are different types in ARBEL.

ARBEL uses flexible data structures, registries, rather than allowing users to create their own types.  All types in ARBEL are, in this sense, "built-in".  But registries can represent structure or record types that are used in other languages. ARBEL has a system to declare such registries =of= a certain kind.  It acts as a label a user gives a registry (much like =R='s S3 classes).  It can be used to determine which version of a generic instruction is called using ARBEL's =dispatch= operator.  

*** Argument Passing

ARBEL arguments are technically passed by reference.  But you cannot directly modify the value of data you pass as arguments /except/ for registries.  You can modify the contents of registries that are passed to instructions.  So, to modify values in place, an instruction takes the register corresponding to the data and the registry to modify the data in as an argument. For example:

#+BEGIN_SRC arbel
... set /x [ registry /y "hello" . ] .
... print x:/y .
hello
... set /change-it ( set loc val reg . ) .
... change-it /loc /y /val "goodbye" /reg x .
... print x:/y .
goodbye
#+END_SRC

*** General style

ARBEL is an imperative, command-based language.  The user gives commands that modify data.  It is a natural type of language to use for business and personal programming.

* The Basics
** Statements and data types

A line of ARBEL code is called a statement.  A statement consists of a sequence of data separated by whitespace and, like a sentence, ends with a period. In most cases, the first data element in a sequence will be an /operation/. An operation is a built-in ARBEL command to perform some action.  They implement the basic functionality necessary to manipulate different types of data and to move data around in registries.

For example,
#+BEGIN_SRC arbel
... set /hello "Hello, world!" .
... print hello .
Hello, world!
#+END_SRC

=set= is the default location for the ARBEL operation to assign data to a register. The first statement assigns the String value to the =/hello= register. Words that start with a forward slash (=/=) refer to registers.  To access data stored at a register, type the register's name without the forward slash as in the second statement. To make a String in ARBEL, enclose words in double quotation marks. 

=print= is the operation to print out data.  Any kind of data can be printed so you can inspect its contents.  When the data is a String, the contents of the string are printed to the screen.

ARBEL's syntax is lean.  There are no reserved keywords.  The standard operations are located at certain registers by default, but they are data just like data you create yourself.  You can move them around in the registry, in effect changing the name of the operation.  This is a bad idea if you work with code someone else has written, but you can do it.

Aside from Strings, some other basic data types in ARBEL which will be useful in the coming examples are: Integers, Reals, Registers, and Booleans.  Integers are whole numbers.  Reals are numbers with a decimal point.  Registers are symbols denoting locations in a registry. Booleans are either =True= or =False=.  There are a few other types but those will be introduced in their own sections.

#+BEGIN_SRC arbel
... set /days-in-week 7 .
... set /penny 0.01 .
... set /facts True .
... set /lies False .
... set /loc /my-register .
#+END_SRC

The last important note about ARBEL's syntax: all syntax elements must be separated by whitespace.  So it would be an error to write:

#+BEGIN_SRC arbel
... print "Hello, world!".
#+END_SRC

The space before the period is required.  

There are /no/ restrictions on what registers may be named.  A name starting with a forward slash or the register =/.= would be inconvenient, but there is nothing wrong with it syntax-wise.  To access registers with names that might mean literal data or other syntax elements, use the =get= operation. For example,
#+BEGIN_SRC arbel
... set /. 12 .
... print . .
Error: Number of arguments to <print> is less than 1.
... get /. .
ans = 12
#+END_SRC

The =get= operation returns the data located at a given register.  Usually, you will just type the name of the register without the forward slash, but the =get= operation can be used to "de-reference" a register which can be useful when writing generic instructions.

** Registers

Registers in ARBEL are locations in the current registry.  They are identifiers for variables.  To refer to a register location, we write the register name preceeded by a forward slash.  To get the value stored at a certain register, we omit the forward slash.  For example,

#+BEGIN_SRC arbel
... set /x 10 .
... print x .
10
#+END_SRC

The =set= operation sets the =/x= register to the integer value =10=.  The =print= operation then prints out the value 10 stored at register =x=.

Registers are themselves a type of data.  You can assign a register to a register value.  For example,

#+BEGIN_SRC arbel
... set /x /y .
... set x 10 .
... print y .
10
... print x .
/y
#+END_SRC

In this example, =/x= stores the register =/y=.  The =set= operation expects a register as its first argument, and the argument is provided by referencing the /value/ located at =/x=, which is =/y=.  So the =set= operation assigns the value =10= to =/y=.

Data can be moved around from register-to-register using the =move= operation.  When data is moved in this way, it is not copied so it is an efficient way to reassign a variable name.  

#+BEGIN_SRC arbel
... set /x 10 .
... print x .
10
... move /x /y .
... print y .
10
... print x .
Error: Value at register /x not found.
#+END_SRC

Data at a register can be deleted in two ways.  Both operations remove the data from the registry, but the =delete= operation allows the garbage collector to release the memory whenever it would like and the =free= operation immediately frees the memory.  Otherwise, they are the same:

#+BEGIN_SRC arbel
... set /x 10 .
... print x .
10
... delete /x .
... print x .
Error: Value at register /x not found.
... set /x 5 .
... free /x .
... print x .
Error: Value at register /x not found.
#+END_SRC

To test whether a value is assigned to a register, you can use the =exist= operation.

#+BEGIN_SRC arbel
... set /x 10 .
... exist /x .
ans = True
... delete /x .
... exist /x .
ans = False
#+END_SRC

There are other operations that can be used with registers, see the reference section at the end of this manual. 

** Registries

Registries contain data located at registers.  When you start up ARBEL, you are in the top-level registry, but you can, and likely will, create your own registries to structure your data.

To create a registry, use the =registry= operation.  The =registry= operation sets the =/ans= register in the current registry to a new registry.  For example,

#+BEGIN_SRC arbel
... registry /x 10 /y 2 /z "hello" .
ans = a registry with:
x of type Integer, value: 10
y of type Integer, value: 2
z of type String, value: "hello"
#+END_SRC

You will likely want this registry to be stored in some other register because many operations overwrite the =/ans= register.  You can do this using a =move= operation after running =registry=.

#+BEGIN_SRC arbel
... registry /x 10 /y 2 /z "hello" .
... move /ans /my-registry .
... print my-registry .
a registry with:
x of type Integer, value: 10
y of type Integer, value: 2
z of type String, value: "hello"
#+END_SRC

The registry you are "inside" defines the scope of ARBEL code.  If a register is not set inside the current registry, ARBEL will try to find it in the register "above" the current registry.  To change the scope in ARBEL, you use the operation =go-in= which enters a new registry and =go-out= which moves out of the lower level registry.
#+BEGIN_SRC arbel
... set /num 11 .
... go-in my-registry .
... print z .
hello
... print num .
11
... go-out .
... print z .
Error: Value at register /z not found.
... print num .
11
#+END_SRC

The last important syntax element of registries is that their elements can be accessed (without switching registries) by either using the =get= operation or the colon notation.  

The =get= operation works like many other ARBEL commands: it sets the =/ans= register to the value located at a certain register in a registry.

#+BEGIN_SRC arbel
... get /z my-registry .
ans = hello
#+END_SRC

The colon notation is a more compact way to reference elements in registries because this is a common task.  When you reference a registry, if you add a colon to its name, followed by a register, it will refer to the value located at that register in that registry.  For example,

#+BEGIN_SRC arbel
... print my-registry:/z .
hello
#+END_SRC

This notation is one example of ARBEL adding just enough syntax to avoid some of the issues with other languages with regular syntaxes like Scheme or Lisp.  In those languages, you would have to call the equivalent of =get= to reference the values which seems (to me) more cumbersome than the colon notation.

While there are many operations to manipulate registries, they mostly require information we have yet to learn, but will, in the next section.  I will then introduce these additional operations.

** Substatements and Instructions

Or, you can do this in one line using the =set= operation and the =registry= operation in a substatement:

#+BEGIN_SRC arbel
... set /my-registry [ registry /x 10 /y 2 /z "hello" . ] .
#+END_SRC

This introduces one of the key syntax elements in ARBEL: parenthesis and substatements.  Parenthesis contain substatements and different types of parenthesis modify when those statements are executed.

The first kind of substatement, used in this example, is enclosed in square brackets.  For example,
#+BEGIN_SRC arbel
... add 1 [ sub 5 2 . ] .
ans = 4
#+END_SRC

When you use square brackets the statements inside the brackets are executed before the outer command is.  Whatever those statements set the =/ans= register to is then interpreted as the value used for the argument where the substatement was inserted.  So, in the above example, the =sub= operation subtract 2 from 5 and sets the =/ans= register to the result.  The =add= operation then receives the two arguments =1= and =3= and sets the =/ans= register to the result.

The important thing to remember about statements inside square brackets is that they are /always/ executed, even if the operation does not end up using that argument.  The substatements also /must/ set the =/ans= register, otherwise there is an error.

The second type of substatement is enclosed in open parenthesis =()=.  Open parenthesis quote code to be executed potentially in another context.  The code is not executed immediately but is stored as a data type called an "instruction". For example,
#+BEGIN_SRC arbel
... set /add-one ( add t 1 . ) .
#+END_SRC

The register =/add-one= is set to hold the quoted code/instruction.  This code can be executed later in a different context, in another registry.

Instructions can be "called" using the =call= operation.  For example:

#+BEGIN_SRC arbel
... set /add-one ( add t 1 . ) .
... call add-one /t 10 .
ans = 11
... call add-one /t 10 /add sub .
ans = 9
#+END_SRC

Calling an instruction creates a new temporary registry in which the instruction's code is executed.  After the code finishes whatever the =/ans= register is set to in the temporary registry is the new value of the =/ans= register in the calling registry.

Also: notice that while the argument likely expected by the =add-one= instruction above is =/t=, the caller of the instruction can specify whatever environment they would like the code to be executed in.  So they can change the =/add= register to refer to what is located at the =/sub= register in the calling registry.  This is a useful tool. It allows the caller to make other code as generic as they would like.  To see the code used in an instruction so that you know what is possible to replace, you can =print= the instruction.

#+BEGIN_SRC arbel
... print add-one .
(  add t 1 .  )
#+END_SRC

Because calling instructions is a common thing to do, and because there is no ambiguity, you do not need to use the =call= operation directly.  If the first element of a command is an instruction then it is assumed that you want to =call= it.  For example,

#+BEGIN_SRC arbel
... set /add-one ( add t 1 . ) .
... add-one /t 10 .
ans = 11
#+END_SRC

Sometimes it is useful to make an instruction like an operation, taking positional arguments.  This is mostly useful for passing instructions to operations like =do-to-all= which applies an operation to each element of a registry.  To do this, ARBEL uses the angle brackets =<>=, like so:
#+BEGIN_SRC arbel
... set /add-one-op < ( add t 1 . ) /t > .
... add-one-op 4 .
ans = 5
... set /x [ list 1 2 3 . ] .
... print x .
a registry with:
t1 of type Integer, value: 1
t2 of type Integer, value: 2
t3 of type Integer, value: 3
... do-to-all add-one-op x .
ans = a registry with:
t1 of type Integer, value: 2
t2 of type Integer, value: 3
t3 of type Integer, value: 4
#+END_SRC

The =list= operation used in this example generates a registry where each element is located at registers =/t1,/t2,...,/tN= in the order in which the values were passed to the operation.  It is useful for creating registries that have, well, a list-like structure.

The angle brackets convert a user-written instruction to an operation expecting positional arguments.  The positional arguments bind to the registers in the order they are specified in the angle brackets.  For example:

#+BEGIN_SRC arbel
... set /proportion ( div t1 [ add t1 t2 . ] . ) .
... < proportion /t1 /t2 > 1.0 3.0 .
ans = 0.250000
... < proportion /t2 /t1 > 1.0 3.0 .
ans = 0.750000
#+END_SRC


*** The ans register

You have seen the =/ans= register being used throughout this manual, but it is an important mechanic in ARBEL so I thought it would be useful to add a small note on how it operates.  The =/ans= register is the mechanism by which an instruction or operation returns values to the calling registry.  If a value is computed in an instruction and you want to return it to the calling registry, end the instruction with a call to the =answer= operation.

#+BEGIN_SRC arbel
... answer 10 .
ans = 10
#+END_SRC

=answer= sets the =/ans= register to whatever argument you provide.  The special characteristic of the =/ans= register is that it is copied back to the calling registry from whatever context you executed the instruction in.  For example, consider the following instruction:
#+BEGIN_SRC arbel
... delete /ans .
... set /instr ( set /value 10 . ) .
... instr .
... print ans .
Error: Value at register /ans not found.
... print value .
Error: Value at register /value not found.
#+END_SRC

The instruction set the =/value= register but only in its own temporary environment.  It does not modify anything about the calling registry.  But if we instead write,
#+BEGIN_SRC arbel
... set /instr ( set /ans 10 . ) .
... instr .
ans = 10
... print ans .
10
#+END_SRC

The =/ans= register gets copied back to the calling environment.  The =answer= operation is a convenient way to set the =/ans= register which also helps to make it visually clear that this is the return value of the instruction not just setting another register.

** Conditional statements

The last type of substatement in ARBEL is enclosed in curly braces.  These statements are not always executed.  They are only executed if the operation actually needs the value.  Sometimes, this is called "lazy evaluation". These substatements can be used anywhere but their main use is with the =if= operation. 

#+BEGIN_SRC arbel
... set /x 4 .
... if [ gt x 3 . ] { print "x is greater than 3." . } { print "x is less than or equal to 3." . } .
x is greater than 3.
... set /x 2 .
... if [ gt x 3 . ] { print "x is greater than 3." . } { print "x is less than or equal to 3." . } .
x is less than or equal to 3.
#+END_SRC 

The =if= operation sets the =/ans= register to its second argument if its first argument is =True= and the third argument if its first argument is =False=.  The value of the second argument is accessed only if the first is =True=.  So the code is only executed if the first argument is =True=.  If we had instead used square brackets, both statements would be executed regardless   

Statements enclosed in curly brackets evaluate to whatever they set the =/ans= register to.  They do not have to set the =/ans= register but the instruction or operation must not require them to have a value in this case.  As we saw above, the =if= operation does not require the argument to have a value because the =print= operation does not set the =/ans= register.

** Loops and Application

There are two types of loops in ARBEL: "imperative" loops that repeat code until some condition is reached and loops that apply an operation to all or a subset of the elements in a registry.  Loops are not implemented using a special syntax in ARBEL. They are simply different operations that operate like any other operation.

*** Imperative Loops

=while= is the imperative looping operation. It takes two arguments, both instructions.  The first instruction is used to determine whether to continue with the loop.  It is executed by ARBEL in the current registry and if it sets the =/ans= register to =True=, the second instruction is executed (also in the current registry).  If the first instruction sets the =/ans= register to =False=, the loop ends.  For example,
#+BEGIN_SRC arbel
... set /i 10 .
... while ( 
            print i . 
            gt i 0 . 
          )
          (
            decr i .
          ) .
10
9
8
7
6
5
4
3
2
1
0
... print i .
0
#+END_SRC

Because =while= is implemented as just another operation and its arguments are regular instructions, the first instruction for =while= can be multiple lines of code and do things besides test whether to terminate the loop.  This allows you to stick the actual test wherever you'd like in the loop.  

The other thing to notice about =while= is that its instructions are executed in the current registry.  What that means and that you can access any registers in the current registry and any changes you make will modify data in the registry.  Like =/i= changed from =10= to =0= in the above example.

The other looping operation is =repeat=.  =repeat= takes two arguments, an integer and an instruction and executes the instruction a fixed number of times.  This is useful for when you know a loop will need to loop =N= times.  It largely replaces what =for= loops would be used for in C, but it is not as flexible about the termination condition (use =while= if you need flexibility).

For an example, see the following instruction which computes the left hand Riemmann sum of an operation over a range.

#+BEGIN_SRC arbel
... set /integrate 
    ( 
      set /delta [ div [ sub ub lb . ] n . ] .
      set /x lb .
      set /int 0.0 .
      repeat n
            (
              incr int [ f x . ] .
              incr x delta .
            ) .
      mul int delta .
    ) .
... integrate /f < ( mul t t . ) /t > /lb 0.0 /ub 1.0 /n 1000 .
ans = 0.332834
#+END_SRC

*** Operation Application

ARBEL also provides operations to apply operations to all the data located at certain registers in a registry. These operations are similar to =map= and =apply= functions frequently found in more "functional" languages.  ARBEL's flavor of these techniques are two operations called =do-to-all= and =collapse=.  Both apply an operation to all registers that match a certain pattern in a registry and return the results.  =do-to-all= sets the =/ans= register to a registry that has the results of applying an operation to each element in the registry.  =collapse= applies an operation to the first two elements of a registry and then executes the operation with the result and the third argument and so on.  For example,

#+BEGIN_SRC arbel
... do-to-all mul [ list 1 2 3 . ] [ list 4 3 6 . ] .
ans = a registry with:
t1 of type Integer, value: 4
t2 of type Integer, value: 6
t3 of type Integer, value: 18
... collapse add ans .
ans = 28
#+END_SRC


=do-to-all= applies the operation to all values in the registry.  =collapse= applies them to registers that have the same pattern: starting with a certain prefix (by default: =/t=) and ending with a number.  For example:

#+BEGIN_SRC arbel
... collapse sub [ registry /x1 10 /x2 3 /x3 2 . ] "x" .
ans = 5
... collapse sub [ registry /x1 10 /x2 3 /x3 2 . ] .
(Nothing returned because no /t registers)
#+END_SRC

** Manipulating Registries

There are several operations for modifying data inside registries after they have been created.  To set registers in a registry, you can use the optional third argument of =set=.

#+BEGIN_SRC arbel
... set /w "New Data" my-registry .
... print my-registry .
a registry with:
w of type String, value: "New Data"
x of type Integer, value: 10
y of type Integer, value: 2
z of type String, value: "hello"
#+END_SRC

To execute code inside a registry, you can use the =in= operation.

#+BEGIN_SRC arbel
... print z .
Error: Value at register /z not found.
... in my-registry ( print z . ) .
hello
#+END_SRC


You can also go inside a registry so that your scope changes to that registry with the =go-in= operation.  You can then move out of that registry with the =go-out= operation.

#+BEGIN_SRC arbel
... delete /y .
... set /x [ registry /y "hello" . ] .
... print y .
Error: Value at register /y not found.
... go-in x .
... print y .
hello
... go-out .
... print y .
Error: Value at register /y not found.
#+END_SRC

Sometimes you want to modify data in the registry above yours.  Perhaps, you want to write an instruction that takes registers as arguments and then performs some task in the registry calling the instruction, not in the instruction's temporary registry. You can do this in ARBEL with the =up= operation.  The existence of the =up= operation means that ARBEL instructions are allowed to modify state.  This fits well with ARBEL's overall feel of giving commands to modify data contained in registries. You should not think of ARBEL instructions as "pure" functions or even functions really (although some will be, of course).  Instructions are code that is executed in different contexts.

For an example of =up= to write an operation that moves data between registers when the register name is specified as a string instead of a register,
#+BEGIN_SRC arbel
... set /move-str < ( up move [ to-register str1 . ] [ to-register str2 . ] . ) /str1 /str2 > .
... set /x 10 .
... move-str "x" "y" .
... print y .
10
#+END_SRC

Without the =up= operation, =move= would move data around in the temporary registry without affecting the calling registry.

* Examples
** Tokenize a String
#+INCLUDE: "../examples/tokenize.arb" src arbel

** Parse a CSV file
#+INCLUDE: "../examples/parse_csv.arb" src arbel

** Numerical Integration 
#+INCLUDE: "../examples/integrate.arb" src arbel

** Basic Matrix Algebra
#+INCLUDE: "../examples/matrix.arb" src arbel

** Numerical Differentiation
#+INCLUDE: "../examples/deriv.arb" src arbel

** FizzBuzz
#+INCLUDE: "../examples/fizzbuzz.arb" src arbel

** Dispatch
#+INCLUDE: "../examples/dispatch.arb" src arbel

* Operation Reference
Arguments that are optional are enclosed in angle brackets (<>).  Operations are classified by the main data type they manipulate.

** Registry operations

*** Creation

- =registry REGISTER1 VALUE1 REGISTER2 VALUE2 ...= --- sets the =/ans= register to a registry with =VALUE1= located at =REGISTER1= and so on.

- =list VALUE1 VALUE2 ...= --- set the =/ans= register to a Registry with =VALUE1= at Register =/t1=, =VALUE2= at Register =/t2=, and so on.


*** Insert, move, and remove data to and from registers
- =set REGISTER VALUE <REGISTRY>= --- sets the value at =REGISTER= to =VALUE= in the registry =REGISTRY=.  If the =REGISTRY= argument is omitted, then it will set the register in the current registry.

- =move REGISTER1 REGISTER2= --- move the value located at =REGISTER1= to =REGISTER2=.  Does not copy the data so it is an efficient way to move data.

- =delete REGISTER= --- delete the value at =REGISTER= in the current registry.

- =free REGISTER= --- delete the value at =REGISTER= in the current registry.  Does not send the free'd data to the garbage collector but instead releases the memory immediately.  The trade-off versus =delete= is that it forces immediate removal of memory in main execution thread (which takes longer and blocks other instructions) while =delete= is faster but the memory may not be immediately removed (higher memory use).


*** Access data in Registry

- =get REGISTER <REGISTRY>= --- sets the =/ans= register to the value located at =REGISTER= in =REGISTRY=.  If the =REGISTRY= argument is not specified, get from the current registry.

- =exist REGISTER <REGISTRY>= --- set the =/ans= register to =True= if a value exists at the =REGISTER= in =REGISTRY=.  If the =REGISTRY= argument is omitted, check in the current registry.

- =import REGISTRY= --- set the Registers in the current Registry to hold the same values that they hold in REGISTRY.

- =where REGISTRY INSTRUCTION= --- set the =/ans= register to a Registry containing all the elements in the registry such that the INSTRUCTION when passed the element of the Registry at Register =/t= sets the =/ans= register to =True=.

*** Apply Operations to elements of a Registry

- =do-to-all OPERATION REGISTRY1 REGISTRY2 ... REGISTRYN= --- execute =OPERATION= which takes arguments its arguments (1...N) from each element in =REGISTRY1=, ..., =REGISTRYN=.  Sets the =/ans= register to a Registry which contains whatever the =OPERATION= evaluates to at the corresponding Registers.  For example, =do-to-all add [ list 1 2 3 . ] [ list 4 5 6 . ]= sets the =/ans= register to a Registry with elements (5,7,9) at registers =(/t1,/t2,/t3)=.  =do-to-all= will only return results at Registers that exist in all Registries.  So, for example, =do-to-all add [ list 1 2 3 . ] [ list 4 5 . ]= sets the =/ans= Register to =list 5 7=.

- =collapse OPERATION REGISTRY <STRING>= --- sets the =/ans= register to the value of applying =OPERATION= to the value in the =REGISTRY= at Register =/STRING1= and =/STRING2= and then again to the result of that and to the value of  =/STRING3= and so on. For example, =collapse add [ list 1 2 3 . ] "t"= sets the =/ans= register to =6=.  If the =STRING= argument is omitted, it is assumed to be ="t"=.


*** Execute code in a registry

- =in REGISTRY INSTRUCTION= --- call =INSTRUCTION= in =REGISTRY=.

- =go-in REGISTRY= --- make =REGISTRY= the new current registry.

- =go-out= --- leave the current Registry and move to the Registry above it.

- =up STATEMENT= --- execute STATEMENT in the registry above the current one after resolving the values of the arguments of the statement in the current registry.  For example, we can create an Instruction that can be used to increment a variable in place, like so: 
  #+BEGIN_SRC arbel
  ... set /inc ( up set x [ add 1 [ up get x . ] . ] . ) .
  ... set /x 1 . 
  ... inc /x /x . 
  ... print x .
  2
  #+END_SRC

*** Test if a registry

- =is-registry VALUE= --- sets the =/ans= Register to =True= if the =Value= is a Registry and to =False= otherwise.

*** Classify a registry

- =of STRING REGISTRY= --- declare REGISTRY to be =of= kind STRING.

- =is-of STRING REGISTRY= --- set the =/ans= Register to =True= if REGISTRY is of kind STRING.

- =dispatch STRING VALUE= --- set the =/ans= Register to the Instruction called STRING corresponding to VALUE.  In other words if =dispatch "f" 10=, sets the =/ans= register to Instruction at =/f+Integer=.


** Real and Integer operations

*** Arithmetic operations
- =add NUMBER1 NUMBER2 ...= --- adds all the numbers together and sets the =/ans= register to the result.

- =mul NUMBER1 NUMBER2 ...= --- multiplies all the numbers together and sets the =/ans= register to the result.

- =sub NUMBER1 NUMBER2 ...= --- subtracts the second number from the first and the third number from that and so on and sets the =/ans= register to the result. 

- =div NUMBER1 NUMBER2 ...= --- divides the first number by the second, the result by the third number, and so on and sets the =/ans= register to the result.

- =mod NUMBER1 NUMBER2= --- return the remainder of dividing the first number by the second.

- =incr INTEGER1 <INTEGER2>= --- increment =INTEGER1= by =INTEGER2= or by 1 if INTEGER2 is omitted.  The difference between this operation and =add= is that it modifies =INTEGER1= in place.

- =decr INTEGER1 <INTEGER2>= --- decrement =INTEGER1= by =INTEGER2= or by 1 if INTEGER2 is omitted.  The difference between this operation and =sub= is that it modifies =INTEGER1= in place.

*** Comparison operations
- =gt NUMBER1 NUMBER2= --- set the =/ans= register to =True= if =NUMBER1= is greater than =NUMBER2= and to =False= otherwise.

- =lt NUMBER1 NUMBER2= --- set the =/ans= register to =True= if =NUMBER1= is less than =NUMBER2= and to =False= otherwise.

- =eq NUMBER1 NUMBER2= --- set the =/ans= register to =True= if =NUMBER1= is equal to =NUMBER2= and to =False= otherwise.

- =lt-eq NUMBER1 NUMBER2= --- set the =/ans= register to =True= if =NUMBER1= is less than or equal to =NUMBER2= and to =False= otherwise.

- =gt-eq NUMBER1 NUMBER2= --- set the =/ans= register to =True= if =NUMBER1= is greater than or equal to =NUMBER2= and to =False= otherwise.

*** Conversion operations
- =to-number STRING|REGISTER= --- if the argument is a String, try to convert to a number and set the =/ans= Register to the result.  If the argument is a Register and ends in a number, set the =/ans= Register to the result.

- =to-real INTEGER= --- set the =/ans= Register to a Real representing the INTEGER.

*** Test if type operations
- =is-integer VALUE= --- sets the =/ans= Register to =True= if the =Value= is an Integer and to =False= otherwise.

- =is-real VALUE= --- sets the =/ans= Register to =True= if the =Value= is a Real and to =False= otherwise.

*** Common mathematical operations
- =log NUMBER= --- set the =/ans= Register to the natural logarithm of NUMBER.

- =exp NUMBER= --- set the =/ans= Register to the NUMBER power of the natural base.

- =power NUMBER1 NUMBER2= --- set the =/ans= Register to NUMBER1 raised to the NUMBER2 power.


** Control flow operations

- =if BOOLEAN VALUE1 <VALUE2>= --- if the first argument is =True=, sets the =/ans= register to =VALUE1=, if it is =False=, sets the =/ans= register to =VALUE2=.  If =VALUE2= is omitted, do nothing if the first argument is =False=.

- =while INSTRUCTION1 INSTRUCTION2= --- Call =INSTRUCTION1= in the current Registry. If it sets its =/ans= register to =True=, call =INSTRUCTION2=.  Repeat.

- =repeat INTEGER INSTRUCTION= --- call INSTRUCTION INTEGER times.

- =please INSTRUCTION1 INSTRUCTION2= --- Call =INSTRUCTION1=.  If there is an error, then call =INSTRUCTION2=.

** Environment operations

*** Modify the /ans register

- =answer VALUE= --- set the =/ans= register to =VALUE=.

- =sit= --- do nothing but lookup all arguments (causes Active Expressions --- instructions in curly brackets --- to be executed).

*** Exit ARBEL

- =exit= --- exit ARBEL.

*** Print output

- =print VALUE= --- prints =VALUE= to screen.

*** Input and output files and state

- =source STRING= --- executes ARBEL code in the file named by STRING.

- =save FILENAME= --- save the contents of the current registry to file.

- =load FILENAME= --- load the contents of a saved file into the environment.

- =output-code STRING= --- outputs the code that has been entered at the prompt so far to the file named STRING.

- =clear-code= --- clear code that has been entered so far so that the code that =output-code= outputs will be empty.

*** Interacting with the shell

- =shell STRING= --- execute the shell command STRING.

- =change-dir STRING= --- change directory to the location given in STRING.

- =current-dir= --- set the =/ans= Register to a String giving the current directory.

*** Error handling

- =error STRING <INTEGER>= --- outputs error message String and sets an error code INTEGER (if specified, otherwise, the error number is =1=).

- =is-error INSTRUCTION= --- sets the =/ans= Register to =True= if there was an error executing the =INSTRUCTION= and to =False= otherwise.

- =push-through INSTRUCTION= --- execute each statement in =INSTRUCTION= even if there is one of the statements has an error.

** String operations

*** Access, search, and modify string elements

- =substring STRING INTEGER1 INTEGER2= --- sets the =/ans= Register to the subset of STRING where the characters included are determined by INTEGER1 and INTEGER2.  Strings are 1-indexed in ARBEL so the first character is at location 1.  If the INTEGER is less than or equal to 0, determine the location from the end of the String.  So if =INTEGER1= and =INTEGER2= are =0=, then it will set the =/ans= register to the last character in =STRING=.

- =match STRING1 STRING2 <INTEGER>= --- find occurences of regular expression STRING1 in String STRING2.  Sets the =/ans= Register to a Registry with all submatches located at the =/tN= registries.  The optional third argument gives the number of matches to return.  If =0= is provided, return all matches (default).

- =replace STRING1 STRING2 STRING3 <INTEGER>= --- set the =/ans= Register to a String formed by replacing all occurences of regular expression STRING1 with STRING2 in STRING3.  The optional fourth argument gives the number of matches to replace.  If =0=, replace all (default).

*** String properties

- =string-length STRING= --- sets the =/ans= register to the number of characters in =STRING=.

*** String comparison

- =string-eq STRING1 STRING2= --- sets the =/ans= Register to =True= if the two strings are equal and to =False= otherwise.

- =string-lt STRING1 STRING2= --- sets the =/ans= Register to =True= if =STRING1= is less than =STRING2= in the sense that the ASCII characters have lower values.

- =string-gt STRING1 STRING2= --- sets the =/ans= Register to =True= if =STRING1= is greater than =STRING2= in the sense that the ASCII characters have lower values.

*** Combine strings

- =string-append STRING1 STRING2= --- sets the =/ans= register to the concatenation of the two Strings so that the resulting string is ="STRING1STRING2"=.

*** Convert to string

- =to-string INTEGER|REAL|REGISTER <INTEGER2>= --- sets the =/ans= Register to a String representing the INTEGER or REAL or REGISTER provided as the first argument.  The second argument is optional if a REAL argument is provided.  INTEGER2 gives the number of elements after the decimal point to include.  If not provided, 6 decimal places are included.

*** Test if String

- =is-string VALUE= --- sets the =/ans= Register to =True= if the =Value= is a String and to =False= otherwise.

*** Strings from User Input

- =input REGISTER= --- reads a line of text the user enters and sets the =/ans= Register to the result (always a String).


** Register operations

*** Operations on "list" registers

- =next REGISTER= --- if the =REGISTER= ends in a number, return the Register with that number incremented by 1.

- =previous REGISTER= --- if the =REGISTER= ends in a number, return the Register with that number minus 1.  If that would cause the number to be less than 1 set the =/ans= Register to the "first" register with that prefix so that =previous /t1 .= sets =/ans= to =/t1=.

- =last REGISTRY STRING= --- return the last Register in the =REGISTRY= that starts with =STRING=.  So that if you had registers =/x0=, =/x1=, and =/x2= in the Registry, =last REGISTRY "x"= would return =/x2=.

*** Convert to register

- =to-register STRING|INTEGER= --- sets the =/ans= register to a Register named =STRING= or to =/tINTEGER=.

*** Register comparison
- =register-eq REGISTER1 REGISTER2= --- sets the =/ans= Register to =True= if the two Registers are the same and to =False= otherwise.

*** Test if a Register
- =is-register VALUE= --- sets the =/ans= Register to =True= if the =Value= is a Register and to =False= otherwise.

** Instruction operations

- =call INSTRUCTION REGISTER1 VALUE1 REGISTER2 VALUE2 ...= --- executes INSTRUCTION in a Registry with REGISTER1 assigned to VALUE1 and so on.

- =is-instruction VALUE= --- sets the =/ans= Register to =True= if the =Value= is an Instruction and to =False= otherwise.

- =op INSTRUCTION REGISTER1 ... REGISTERN= --- set the =/ans= register to an operation that calls =INSTRUCTION= after binding =REGISTER1= to the first argument, and so on.

** File operations

- =is-file VALUE= --- sets the =/ans= Register to =True= if the =Value= is a File and to =False= otherwise.

- =open-text-file STRING= --- sets the =/ans= Register to a File object corresponding to the file named STRING.

- =read FILE= --- read a single character from a File object and set the =/ans= Register to that character.

- =close REGISTER= --- if a File object is located at REGISTER, close the File and remove its reference from the REGISTER.

- =read-line FILE= --- sets the =/ans= Register to the next line from FILE.

- =write STRING FILE= --- write a given STRING to FILE.

- =data STRING= --- load a saved registry in =~/.darbs/= with the extension =.darb= into the current registry. The file being loaded is: =~/.darbs/STRING.darb=.

** Boolean operations

- =is-boolean VALUE= --- sets the =/ans= Register to =True= if the =Value= is a Boolean and to =False= otherwise.

- =and BOOLEAN1 BOOLEAN2= --- sets the =/ans= Register to =True= if BOOLEAN1 and BOOLEAN2 are =True= and to =False= otherwise.

- =or BOOLEAN1 BOOLEAN2= --- sets the =/ans= Register to =True= if either BOOLEAN1 or BOOLEAN2 are =True= and to =False= otherwise.

- =not BOOLEAN= --- sets the =/ans= Register to =True= if BOOLEAN is =False= and to =False= otherwise.








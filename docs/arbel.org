# -*- org-html-preamble-format: (("en" "%t<br>%a<br>%T")); -*-
#+TITLE: ARBEL
#+AUTHOR: Zach Flynn
#+DESCRIPTION: ARBEL is a registry-based environment and language. It is "generic-by-default" and is centered around a single flexible data structure: the registry (a hash table).  This manual describes how to use the language.
* Introduction

  ARBEL is a Registry-Based Environment and Language. A /registry/ is a data structure where data is located at "registers".  The data in the registers can be other registries or numbers or strings or code.  It is what other languages might call a /map/ or a /table/.  Registries are the fundamental data type of ARBEL and the language provides many operations to manipulate and recover values from the registries.  ARBEL instructions operate /within/ a certain registry.  The /environment/ (which registers you can access, and so, which objects and instructions are available) is determined by which registry ARBEL is currently operating within.  Instructions themselves are nothing more than a way to instantiate a new (temporary) registry, execute some code inside of it, and write results to the current registry.  

  From this basic, but flexible, data type ARBEL builds up a useful system for interactively constructing programs.  It's goal is to be easy to use interactively for building /personal/ programs (programs primarily for the user's own use) which is why the syntax is very similar to entering commands on the command line.  There are commands to save the code you have already entered so that you can interactively build scripts.  It also has commands that make it easy to save state and the registries that you have created to disk so that you can pick up where you left off.  

  A distinguishing feature of ARBEL that makes it especially useful for constructing personal programs is that it is /naturally generic/.  What this means is that any non-literal in an instruction can be replaced by the user without the author of the instruction anticipating that it would be useful for the user to replace that part of the instruction.  This allows the user a large degree of control over library code.

  The language is imperative and does not try to avoid side-effects (the whole point is to modify the current state of the registry and, perhaps, save it to disk), it is dynamically-typed (registers do not have types, only the values entered in the registries do), and it is strongly typed (values have a certain type and cannot be coerced to other types except explicitly).

  The best way to get a feel for the language and environment is by example so I will stop the rambling about what the language is like and cut to the code.


* The Basics

** Statements and syntax

   A single line of ARBEL code is a statement.  The first element of the statement is one of ARBEL's operators and the other elements are arguments to the operator.  Statements, like sentences, end with periods. For example,
  
   #+BEGIN_SRC
   ... set /hello "Hello, world!" .
   #+END_SRC
    

   =set= is the ARBEL operation to set a register to a certain value.  Names that have a forward slash (â€‹/) preceeding them are /registers/, like =/hello= above. Strings are words enclosed in double quotation marks.  The following demonstrates the other data types in ARBEL:

   #+BEGIN_SRC
   ... set /days-in-week 7 .
   ... set /penny 0.01 .
   ... set /facts True .
   ... set /lies False .
   ... set /add-one ( add t 1 . ) .
   #+END_SRC

   An Integer is a number without a decimal part, a Real is a number with a decimal part, a Boolean value is one which is either True or False, an Instruction is a collection of one or more statements quoted as code (usually created by enclosing code with open parenthesis, "(" and ")").

   To use the value located in a registry, simply type the name of the register without the preceeding forward slash.  For example,
   #+BEGIN_SRC
  ... print days-in-week .
  7
   #+END_SRC

   All code elements must be separated by whitespace in ARBEL including the period that ends the statement and parenthesis.  So it would /not/ be valid to write,

   #+BEGIN_SRC
	' All are WRONG:
	print days-in-week.
	set /add-one (add t 1 .) .
   #+END_SRC

   There must be whitespace before the period.  There also must be whitespace after and before parenthesis. 

   There are three parenthesis types in ARBEL: open parentheis ("()"), closed parenthesis ("[]"), and curly parenthesis ("{}").  All contain statements, but they differ in /when/ the statements they contain are executed.
   
   - Open parenthesis store the code itself as an Instruction object to be executed later using the operation =call=.  For example,
     #+BEGIN_SRC
     ... set /add-one ( add t 1 . ) .
     ... call add-one /t 10 .
     ans = 11
     #+END_SRC

     =call= takes an instruction and then assigns each of the registers that you specify to different values. You do not need to declare what arguments a function takes and you can specify any number of registers to set for any Instruction.  For example, 
     #+BEGIN_SRC
     ... set /add-one ( add t 1 . ) .
     ... call add-one /t 10 .
     ans = 11
     ... call add-one /t 10 /add subtract .
     ans = 9
     #+END_SRC

     This is a defining feature of ARBEL. Code is naturally generic. Any object in an instruction can be replaced by any other (except for a literal value like =11= or ="hello"= ) when the Instruction is called.  The person who wrote the code does not need to do anything to allow this.  You can redefine any non-literal in the code by adding =/name value= in the call to the Instruction.

     Because there is no ambiguity, you do not actually need to use the =call= operation directly.  ARBEL will insert it for you if the first argument is an instruction.  So the following would work as well,
     #+BEGIN_SRC
     ... add-one /t 10 .
     ans = 11
     #+END_SRC

     Instruction objects can also be used in the =while= looping operation and in several other operations.  Their main purpose is to be evaluated later in a potentially different and separate registry.

   - Closed parenthesis ("[]") execute the statements inside of them immediately and evaluate to whatever the code sets the =/ans= register to.  The purpose of these statements is to avoid needing to define temporary registers for intermediate calculations.  For example,
     #+BEGIN_SRC
     ... add [ subtract 5 3 . ] [ multiply 2 3 . ] .
     ans = 8
     #+END_SRC

     You may have noticed the =ans = ...= after entering a lot of these commands.  This tells you the current value of the =/ans= register which is special in ARBEL.  Operations often write to the =/ans= register in the registry from which they are called.  It is the way to "return" values after calling an operation or instruction.  You can set any value to the =/ans= register in the current registry by using the =answer= operation.
     #+BEGIN_SRC
     ... answer 10 .
     ans = 10
     #+END_SRC

     The =/ans= register is special because, after an Instruction finishes running in its temporary registry, whatever the value at the =/ans= register is in that registry is moved to the =/ans= register in the registry that called the instruction.  For example,
     #+BEGIN_SRC
     ... set /add-one ( answer [ add t 1 . ] . ) .
     ... add-one /t 10 .
     ans = 11
     ... print ans .
     11
     #+END_SRC

     The other reason that the =/ans= register is special is, as mentioned, closed parenthesis evaluate to the value the statements inside them set the =/ans= register to.  Because =subtract 5 3 .= sets the =/ans= register to =2= and =multiply 2 3 .= sets the =/ans= register to =6=, =add [ subtract 5 3 . ] [ multiply 2 3 . ] .= sets the =/ans= register to =8=.

   - Curly parenthesis ("{}") also enclose statements, but those statements are only evaluated /if/ we try to use the value of that expression which is, like for the closed parenthesis, the value the statements set the =/ans= register to.  This form of evaluation is often called "lazy evaluation". We can think of closed parenthesis as marking expressions we want to "greedily evaluate" and curly parenthesis as marking expressions to "lazily evaluate".  Lazy evaluation is useful for the =if= operation and other, similar instructions.  For example,
     #+BEGIN_SRC
     ... set /gt-4
     (
       set /str-t [ to-string t . ] . 
       if [ gt t 4 . ]
          { print [ string-append str-t " is greater than 4.\n" . ] . }
          { print [ string-append str-t " is less than or equal to 4.\n" . ] . } .
     ) .
    ... gt-4 /t 10 .
    10 is greater than 4.
    ... gt-4 /t 3 .
    3 is less than or equal to 4.
     #+END_SRC

     It works this way because the =if= operation returns the second value if the first value is =True= and the third value if the first value is =False=.  So it tries to access the second value when =t= is =10=, executing the statements in the second argument, and similarly for the third argument when =t= is =3=.

     If we had instead used closed parenthesis, both statements would execute everytime regardless of the the truth of the first argument to =if=.  If we used open parenthesis, an Instruction object would be returned instead of actually doing the printing (the instruction object could be called to actually do the print later).


   The last syntax element is the comment.  To write a comment in ARBEL, use a single quote (='=) as the first character in a statement.  You can think about this quote as an a special operator.  Comments end with a new line. The comment operator, like other syntax elements, needs whitespace after it, for example:
   #+BEGIN_SRC
   ... ' This is a correct comment
   ... 'This is an incorrect comment, 'This is interpreted as a reference to data in the Register /'This
   #+END_SRC

   That is really it as far as syntax is concerned.  Periods terminate statements, parenthesis enclose statements controlling when they are executed, and registers start with a forward slash and their values are obtained by omitting the slash.  We now also know how to define our own instructions and how to call them and how to prepare statements for greedy or lazy evaluation.
     

** Registries

   In ARBEL, most of the action happens inside /registries/.  Registries are both data structures and define what registers (variables) are in scope.  Because they are full fledged data structures, you can switch scope easily or even pass a scope as an argument. When you start the interpreter, you are already inside the default, top-level registry.  To create a new one, use the =registry= operation,

   #+BEGIN_SRC
   ... registry /hello "Hello, world!" /x 10 .
   #+END_SRC

   This =registry= operation puts a new registry in the =/ans= register.  The registry has a =/hello= register bound to the value ="Hello, world!"= and with the =/x= register bound to the value =10=.  Usually, you will want to bind the value to another register besides =/ans= which will be overwritten by subsequent statements. You can do either of:
   
   #+BEGIN_SRC
   ... registry /hello "Hello, world!" /x 10 .
   ... move /ans /my-registry .
   ... print my-registry .
   ... ' Or:
   ... set /my-registry [ registry /hello "Hello, world!" /x 10 . ] .
   ... print my-registry .
   #+END_SRC

   To access values in a registry, you can either use the =get= operation or the "colon notation":

   #+BEGIN_SRC
   ... get /hello my-registry .
   ans = Hello, world!
   ... print my-registry:/hello
   Hello, world!
   ... print hello .
   Error: Value at `/hello` not found.
   #+END_SRC

   From the last line, we can see that the value =hello= exists only in the registry located at =/my-registry= which we are not currently in.  So we cannot access its =/hello= register directly.  We can change which registry we are in with the =go-in= operation.
   
   #+BEGIN_SRC
   ... go-in hello .
   ... print hello .
   Hello, world!
   #+END_SRC

   We can go back to the registry we were in previously by using the =go-out= operation.

   #+BEGIN_SRC
   ... go-out .
   ... print hello 
   Error: Value at `/hello` not found.
   #+END_SRC

   We can import values from one registry into their corresponding registers in the current registry by using the =import= operation.

   #+BEGIN_SRC
   ... import my-registry .
   ... print hello
   Hello, world!
   #+END_SRC
   
   We can also execute an instruction inside a certain registry by using the =in= command.

   #+BEGIN_SRC
   ... in my-registry ( print [ string-append hello " Goodbye!" . ] . ) .
   Hello, world! Goodbye!
   #+END_SRC

   

   Aside from being a useful data structure, registries are also how ARBEL does /namespaces/.  For example,

   #+BEGIN_SRC
   ... set /math [ registry . ] .
   ... set /factorial
          (
            set /i 2 .
            set /prod 1 .
            while ( lteq i t . )
                  (
                    set /prod [ multiply i prod . ] .
                    set /i [ add i 1 . ] .
                  ) .
            answer prod .
          ) math .
   ... math:/factorial /t 5 .
   ans = 120
   #+END_SRC       

   You can assign Instructions inside registries and then they can be called from that registry using the colon notation.  This code block also demonstrates that the =set= operation takes a third argument: the registry in which to set the register.  When omitted, it sets the register in the current registry as we have seen above.

   Of course, if you don't need to worry about name collisions, you can just =import= it.

   #+BEGIN_SRC
   ... import math .
   ... factorial /t 5 .
   ans = 120
   #+END_SRC

   
   Registries are flexible data structures.  They can be used to represent structures with multiple kinds of values (like =struct= in C).  Or they can be used as namespaces for libraries or different parts of a code base.

** Registers   

Registers are the locations of data in Registries.  They are data themselves and can be manipulated like other data objects in ARBEL.  For example, you can set other registers to registers and use those values wherever you would use Registers.

#+BEGIN_SRC
... set /x /y .
... print x .
/y
... set x "hello" .
... print x .
/y
... print y .
hello
#+END_SRC

You can move data between Registers with the =move= command:

#+BEGIN_SRC
... set /x "hello" .
... move /x /y .
... print y .
hello
... print x .
Error: Value at register /x not found.
#+END_SRC

Registers are data denoting locations so they are often useful ways to manipulate the locations of values instead of the values themselves, as with the =move= and =set= operations.

** Environment

ARBEL is not only a programming language. It is also an /environment/.  The current state of ARBEL --- the values and where they are located in the registry --- can be saved to disk and re-loaded later on.

* Examples

** Example: A Line-Oriented Text Editor

#+INCLUDE: "../examples/arbed.arb" example

Example of use:
#+BEGIN_SRC
... go-in arbed .
... i /s "Hello" .
... o .
Hello
... n .
... i /s "Goodbye" .
... o .
Goodbye
... p .
... o .
Hello
#+END_SRC

** Example: Numerical Differentiation

#+INCLUDE: "../examples/deriv.arb" example

Example of use:
#+BEGIN_SRC
... set /f ( power t 2 . ) .
... deriv /f f /x 1.0
ans = 2.0
#+END_SRC

** Example: Dispatch

#+INCLUDE: "../examples/dispatch.arb" example

Example of use:
#+BEGIN_SRC
... add-n-times /val 4 /times 5 .
ans = 20
... add-n-times /val 4.0 /times 5 .
ans = 20.0
... add-n-times /val "hello" /times 5 .
ans = hellohellohellohellohello
#+END_SRC

** Example: Compute Factorial

#+INCLUDE: "../examples/factorial.arb" example

Example of use:
#+BEGIN_SRC
... factorial 5 .
ans = 120
#+END_SRC

** Example: Numerical Integration

#+INCLUDE: "../examples/integrate.arb" example

Example of use:
#+BEGIN_SRC
... integrate /f ( power t 2 . ) /lb 0.0 /ub 1.0 /n 1000 .
ans = 0.332834
#+END_SRC

** Example: Basic Linear Algebra

#+INCLUDE: "../examples/matrix.arb" example

Example of use:
#+BEGIN_SRC
... set /A [ list [ list 1 2 . ] [ list 3 4 . ] . ] .
... set /B [ list [ list 6 2 . ] [ list 3 4 . ] . ] .
... transpose /A A .
ans = a registry with:
#1 of type Registry, value: a registry with:
#1 of type Integer, value: 1
#2 of type Integer, value: 3
#2 of type Registry, value: a registry with:
#1 of type Integer, value: 2
#2 of type Integer, value: 4
... matrix-multiply /A A /B B .
ans = a registry with:
#1 of type Registry, value: a registry with:
#1 of type Integer, value: 10
#2 of type Integer, value: 26
#2 of type Registry, value: a registry with:
#1 of type Integer, value: 11
#2 of type Integer, value: 25
#+END_SRC

** Example: Split a String

#+INCLUDE: "../examples/tokenize.arb" example

Examples of use:
#+BEGIN_SRC
... tokenize /line "1,2,3" /sep "," .
ans = a registry with:
#1 of type String, value: 1
#2 of type String, value: 2
#3 of type String, value: 3
#+END_SRC

* Reference

Arguments that are optional are enclosed in angle brackets (<>).  Operations are classified by the main data type they manipulate.

** Registry operations

- =set REGISTER VALUE <REGISTRY>= --- sets the value at =REGISTER= to =VALUE= in the registry =REGISTRY=.  If the =REGISTRY= argument is omitted, then it will set the register in the current registry.

- =registry REGISTER1 VALUE1 REGISTER2 VALUE2 ...= --- sets the =/ans= register to a registry with =VALUE1= located at =REGISTER1= and so on.

- =get REGISTER <REGISTRY>= --- sets the =/ans= register to the value located at =REGISTER= in =REGISTRY=.  If the =REGISTRY= argument is not specified, get from the current registry.

- =move REGISTER1 REGISTER2= --- move the value located at =REGISTER1= to =REGISTER2=.  Does not copy the data so it is an efficient way to move data.

- =delete REGISTER= --- delete the value at =REGISTER= in the current registry.

- =exist REGISTER <REGISTRY>= --- set the =/ans= register to =True= if a value exists at the =REGISTER= in =REGISTRY=.  If the =REGISTRY= argument is omitted, check in the current registry.

- =do-to-all INSTRUCTION REGISTRY1 REGISTRY2 ... REGISTRYN= --- execute =INSTRUCTION= which takes arguments at Registers =/t1=, =/t2=, ..., =/tN= for each element in =REGISTRY1=, ..., =REGISTRYN=.  Set the =/ans= register to a Registry which contains whatever the =INSTRUCTION= evaluates to at the corresponding Registers.  For example, =do-to-all ( add t1 t2 . ) [ list 1 2 3 . ] [ list 4 5 6 . ]= sets the =/ans= register to a Registry with elements (5,7,9) at registers =(/#1,/#2,/#3)=.  =do-to-all= will only return results at Registers that exist in all Registries.  So, for example, =do-to-all ( add t1 t2 . ) [ list 1 2 3 . ] [ list 4 5 . ]= sets the =/ans= Register to =list 5 7=.

- =in REGISTRY INSTRUCTION= --- call =INSTRUCTION= in =REGISTRY=.

- =list VALUE1 VALUE2 ...= --- set the =/ans= register to a Registry with =VALUE1= at Register =/#1=, =VALUE2= at Register =/#2=, and so on.

- =collapse INSTRUCTION REGISTRY <STRING>= --- sets the =/ans= register to the value of applying =INSTRUCTION= to the value at Register =/STRING1= and =/STRING2= and then again to the result of that and to the value of  =/STRING3= and so on where the =INSTRUCTION= takes each argument at registers =/t1= and =/t2=. For example, =collapse ( add t1 t2 . ) [ list 1 2 3 . ] "#"= sets the =/ans= register to =6=.  If the =STRING= argument is omitted, it is assumed to be ="#"=.

- =go-in REGISTRY= --- make =REGISTRY= the new current registry.

- =go-out= --- leave the current Registry and move to the Registry above it.

- =is-registry VALUE= --- sets the =/ans= Register to =True= if the =Value= is a Registry and to =False= otherwise.

- =import REGISTRY= --- set the Registers in the current Registry to hold the same values that they hold in REGISTRY.

- =up STATEMENT= --- execute STATEMENT in the registry above the current one after resolving the values of the arguments of the statement in the current registry.  For example, we can create an Instruction that can be used to increment a variable in place, like so: 
  #+BEGIN_SRC
  ... set /inc ( up set x [ add 1 [ up get x . ] . ] . ) .
  ... set /x 1 . 
  ... inc /x /x . 
  ... print x .
  2
  #+END_SRC

- =of STRING REGISTRY= --- declare REGISTRY to be =of= kind STRING.

- =is-of STRING REGISTRY= --- set the =/ans= Register to =True= if REGISTRY is of kind STRING.

- =dispatch STRING VALUE= --- set the =/ans= Register to the Instruction called STRING corresponding to VALUE.  In other words if =dispatch "f" 10=, sets the =/ans= register to Instruction at =/f+Integer=.


** Real and Integer operations

- =add NUMBER1 NUMBER2 ...= --- adds all the numbers together and sets the =/ans= register to the result.

- =mul NUMBER1 NUMBER2 ...= --- multiplies all the numbers together and sets the =/ans= register to the result.

- =sub NUMBER1 NUMBER2 ...= --- subtracts the second number from the first and the third number from that and so on and sets the =/ans= register to the result. 

- =div NUMBER1 NUMBER2 ...= --- divides the first number by the second, the result by the third number, and so on and sets the =/ans= register to the result.

- =gt NUMBER1 NUMBER2= --- set the =/ans= register to =True= if =NUMBER1= is greater than =NUMBER2= and to =False= otherwise.

- =lt NUMBER1 NUMBER2= --- set the =/ans= register to =True= if =NUMBER1= is less than =NUMBER2= and to =False= otherwise.

- =eq NUMBER1 NUMBER2= --- set the =/ans= register to =True= if =NUMBER1= is equal to =NUMBER2= and to =False= otherwise.

- =lteq NUMBER1 NUMBER2= --- set the =/ans= register to =True= if =NUMBER1= is less than or equal to =NUMBER2= and to =False= otherwise.

- =gteq NUMBER1 NUMBER2= --- set the =/ans= register to =True= if =NUMBER1= is greater than or equal to =NUMBER2= and to =False= otherwise.

- =to-number STRING|REGISTER= --- if the argument is a String, try to convert to a number and set the =/ans= Register to the result.  If the argument is a Register and ends in a number, set the =/ans= Register to the result.

- =is-integer VALUE= --- sets the =/ans= Register to =True= if the =Value= is an Integer and to =False= otherwise.

- =is-real VALUE= --- sets the =/ans= Register to =True= if the =Value= is a Real and to =False= otherwise.

- =log NUMBER= --- set the =/ans= Register to the natural logarithm of NUMBER.

- =exp NUMBER= --- set the =/ans= Register to the NUMBER power of the natural base.

- =power NUMBER1 NUMBER2= --- set the =/ans= Register to NUMBER1 raised to the NUMBER2 power.

- =to-real INTEGER= --- set the =/ans= Register to a Real representing the INTEGER.

** Control flow operations

- =if BOOLEAN VALUE1 <VALUE2>= --- if the first argument is =True=, sets the =/ans= register to =VALUE1=, if it is =False=, sets the =/ans= register to =VALUE2=.  If =VALUE2= is omitted, do nothing if the first argument is =False=.

- =while INSTRUCTION1 INSTRUCTION2= --- Call =INSTRUCTION1= in the current Registry. If it sets its =/ans= register to =True=, call =INSTRUCTION2=.  Repeat.

- =repeat INTEGER INSTRUCTION= --- call INSTRUCTION INTEGER times.

** Environment operations

- =exit= --- exit ARBEL.

- =answer VALUE= --- set the =/ans= register to =VALUE=.

- =sit= --- do nothing.

- =print VALUE= --- prints =VALUE= to screen.

- =source STRING= --- executes ARBEL code in the file named by STRING.

- =save FILENAME= --- save the contents of the current registry to file.

- =load FILENAME= --- load the contents of a saved file into the environment.

- =output-code STRING= --- outputs the code that has been entered at the prompt so far to the file named STRING.

- =clear-code= --- clear code that has been entered so far so that the code that =output-code= outputs will be empty.

- =error STRING <INTEGER>= --- outputs error message String and sets an error code INTEGER (if specified, otherwise, the error number is =1=).

- =shell STRING= --- execute the shell command STRING.

- =change-dir STRING= --- change directory to the location given in STRING.

- =current-dir= --- set the =/ans= Register to a String giving the current directory.

- =is-error INSTRUCTION= --- sets the =/ans= Register to the error code of INSTRUCTION (=0= is no error).

** String operations

- =substring STRING INTEGER1 INTEGER2= --- sets the =/ans= Register to the subset of STRING where the characters included are determined by INTEGER1 and INTEGER2.  Strings are 1-indexed in ARBEL so the first character is at location 1.  If the INTEGER is less than or equal to 0, determine the location from the end of the String.  So if =INTEGER1= and =INTEGER2= are =0=, then it will set the =/ans= register to the last character in =STRING=.

- =string-length STRING= --- sets the =/ans= register to the number of characters in =STRING=.

- =string-append STRING1 STRING2= --- sets the =/ans= register to the concatenation of the two Strings so that the resulting string is ="STRING1STRING2"=.

- =string-eq STRING1 STRING2= --- sets the =/ans= Register to =True= if the two strings are equal and to =False= otherwise.

- =string-lt STRING1 STRING2= --- sets the =/ans= Register to =True= if =STRING1= is less than =STRING2= in the sense that the ASCII characters have lower values.

- =string-gt STRING1 STRING2= --- sets the =/ans= Register to =True= if =STRING1= is greater than =STRING2= in the sense that the ASCII characters have lower values.

- =to-string INTEGER|REAL|REGISTER <INTEGER2>= --- sets the =/ans= Register to a String representing the INTEGER or REAL or REGISTER provided as the first argument.  The second argument is optional if a REAL argument is provided.  INTEGER2 gives the number of elements after the decimal point to include.  If not provided, 6 decimal places are included.

- =is-string VALUE= --- sets the =/ans= Register to =True= if the =Value= is a String and to =False= otherwise.

- =input REGISTER= --- reads a line of text the user enters and sets the =/ans= Register to the result (always a String).

- =match STRING1 STRING2 <INTEGER>= --- find occurences of regular expression STRING1 in String STRING2.  Sets the =/ans= Register to a Registry with all submatches located at the =/#N= registries.  The optional third argument gives the number of matches to return.  If =0= is provided, return all matches (default).

- =replace STRING1 STRING2 STRING3 <INTEGER>= --- set the =/ans= Register to a String formed by replacing all occurences of regular expression STRING1 with STRING2 in STRING3.  The optional fourth argument gives the number of matches to replace.  If =0=, replace all (default).

** Register operations

- =next REGISTER= --- if the =REGISTER= ends in a number, return the Register with that number incremented by 1.

- =last REGISTRY STRING= --- return the last Register in the =REGISTRY= that starts with =STRING=.  So that if you had registers =/x0=, =/x1=, and =/x2= in the Registry, =last REGISTRY "x"= would return =/x2=.

- =to-register STRING|INTEGER= --- sets the =/ans= register to a Register named =STRING= or to =/#INTEGER=.

- =register-eq REGISTER1 REGISTER2= --- sets the =/ans= Register to =True= if the two Registers are the same and to =False= otherwise.

- =is-register VALUE= --- sets the =/ans= Register to =True= if the =Value= is a Register and to =False= otherwise.

** Instruction operations

- =call INSTRUCTION REGISTER1 VALUE1 REGISTER2 VALUE2 ...= --- executes INSTRUCTION in a Registry with REGISTER1 assigned to VALUE1 and so on.

- =is-instruction VALUE= --- sets the =/ans= Register to =True= if the =Value= is an Instruction and to =False= otherwise.

** File operations

- =is-file VALUE= --- sets the =/ans= Register to =True= if the =Value= is a File and to =False= otherwise.

- =open-text-file STRING= --- sets the =/ans= Register to a File object corresponding to the file named STRING.

- =read FILE= --- read a single character from a File object and set the =/ans= Register to that character.

- =close REGISTER= --- if a File object is located at REGISTER, close the File and destroy the File object.

- =read-line FILE= --- sets the =/ans= Register to the next line from FILE.

- =write STRING FILE= --- write a given STRING to FILE.

** Boolean operations

- =is-boolean VALUE= --- sets the =/ans= Register to =True= if the =Value= is a Boolean and to =False= otherwise.

- =and BOOLEAN1 BOOLEAN2= --- sets the =/ans= Register to =True= if BOOLEAN1 and BOOLEAN2 are =True= and to =False= otherwise.

- =or BOOLEAN1 BOOLEAN2= --- sets the =/ans= Register to =True= if either BOOLEAN1 or BOOLEAN2 are =True= and to =False= otherwise.

- =not BOOLEAN= --- sets the =/ans= Register to =True= if BOOLEAN is =False= and to =False= otherwise.


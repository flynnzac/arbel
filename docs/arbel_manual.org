# -*- org-html-preamble-format: (("en" "%t<br>%a<br>%T")); -*-
#+TITLE: ARBEL
#+AUTHOR: Zach Flynn
#+DESCRIPTION: ARBEL is a registry-based environment and language. 

* Language

This section describes the ARBEL language's form without reference to the environment or its particular operations.  It consists of a series of definitions.

A /Value/ is data.

A /Literal/ is a direct representation of a specific Value.  For example, the number =3=.

A /Reference/ is a symbol that represents the location of a Value.

A /Simple Statement/ is a sequence of Literals and References, written:
#+BEGIN_SRC arbel
X1 X2 X3 X4 ... XN .
#+END_SRC
Each element of the sequence is separated from the others by whitespace.  The period marks the end of the sequence.  It must also be separated from the elements of the sequence by whitespace.

An /Element/ is either a /Literal/, a /Reference/, or a /Substatement/.

A /Statement/ is a sequence of Elements.

An /Immediate Substatement/ is a sequence of Elements that can be included as one of the elements of an ARBEL Statement. The code represented by this sequence is executed prior to the rest of the Statement.  The statements are enclosed in square brackets (which are separated from the Statements by whitespace).  A Statement containing an immediate substatement looks like this:
#+BEGIN_SRC arbel
Element1 Element2 [ Statement1 . Statement2 . ... StatementN . ] Element3 ... ElementM .
#+END_SRC

A /Conditional Substatement/ is only computed if the outer Statement accesses the Substatement's Element.  The syntax is the same as for immediate substatements with the execption that the inner statements are enclosed in curly braces:
#+BEGIN_SRC arbel
Element1 Element2 { Statement1 . Statement2 . ... StatementN . } Element3 ... ElementM .
#+END_SRC

A /Substatement/ is either an Immediate Substatement or a Conditional Substatement.

An /Instruction/ is a type of data which contains a series of ARBEL statements to be executed later.  It is enclosed in open parenthesis:
#+BEGIN_SRC arbel
( Statement1 . Statement2 ... StatementN . )
#+END_SRC

An /Operation/ is a type of data that performs some action when it appears as the first Element of a Statement.  /Arguments/ refer to the rest of the Elements of a Statement. There are operations built into ARBEL, and they can be defined by the user using an angle bracket syntax which describes both the code to execute and the data locations (called /Registers/) at which to put the Elements before executing the code.  The following defines an operation:
#+BEGIN_SRC arbel
< Instruction Register1 Register2 ... RegisterN >
#+END_SRC

Note that the sequence of Registers does not end with a period because this syntax is not a Statement.

These definitions define the ARBEL language.  ARBEL's environment includes built-in operations to make the language useful for programming.

* Types of Data Literals

Everything in ARBEL is data.  The language is primarily sequences of data.  ARBEL's type system is based on using relatively few, "fixed" data types.  It does not have user-defined types.  Instead, it uses a flexible data structure, called Registries, that can be used to represent complicated data elements built up from the basic types.

This section describes the data types that can be represented as literals.  In later sections, I discuss data types that are only generated by certain operations.

** Numbers

** Strings

** 
** Registers

** Registries





